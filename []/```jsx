```jsx
import React, { useState, useEffect } from 'react';

// Mock data for the Spotify clone
const mockPlaylists = [
  {
    id: 1,
    name: "Today's Top Hits",
    description: "The most popular tracks right now.",
    image: "https://picsum.photos/200/300?random=1",
    songs: [
      { title: "As It Was", artist: "Harry Styles" },
      { title: "Flowers", artist: "Miley Cyrus" },
      { title: "Anti-Hero", artist: "Taylor Swift" },
      { title: "Un Verano Sin Ti", artist: "Bad Bunny" },
      { title: "Flowers", artist: "Miley Cyrus" }
    ]
  },
  {
    id: 2,
    name: "RapCaviar",
    description: "New music, emerging artists, and classic hip-hop.",
    image: "https://picsum.photos/200/300?random=2",
    songs: [
      { title: "Sprinter", artist: "Dave & Central Cee" },
      { title: "First Person Shooter", artist: "Drake" },
      { title: "Rich Flex", artist: "Drake & 21 Savage" },
      { title: "All My Life", artist: "Lil Durk" },
      { title: "Not Like Us", artist: "Kendrick Lamar" }
    ]
  },
  {
    id: 3,
    name: "Pop Rising",
    description: "The hottest new pop tracks on the rise.",
    image: "https://picsum.photos/200/300?random=3",
    songs: [
      { title: "Die For You", artist: "The Weeknd" },
      { title: "greedy", artist: "Tate McRae" },
      { title: "Paint The Town Red", artist: "Doja Cat" },
      { title: "Flowers", artist: "Miley Cyrus" },
      { title: "I'm Good (Blue)", artist: "David Guetta & Bebe Rexha" }
    ]
  },
  {
    id: 4,
    name: "Rock Classics",
    description: "Rock legends & epic anthems.",
    image: "https://picsum.photos/200/300?random=4",
    songs: [
      { title: "Bohemian Rhapsody", artist: "Queen" },
      { title: "Sweet Child O' Mine", artist: "Guns N' Roses" },
      { title: "Smells Like Teen Spirit", artist: "Nirvana" },
      { title: "Back in Black", artist: "AC/DC" },
      { title: "Highway to Hell", artist: "AC/DC" }
    ]
  },
  {
    id: 5,
    name: "Chill Vibes",
    description: "Relaxing tunes to help you unwind.",
    image: "https://picsum.photos/200/300?random=5",
    songs: [
      { title: "Blinding Lights", artist: "The Weeknd" },
      { title: "Save Your Tears", artist: "The Weeknd" },
      { title: "Stay", artist: "The Kid LAROI" },
      { title: "drivers license", artist: "Olivia Rodrigo" },
      { title: "good 4 u", artist: "Olivia Rodrigo" }
    ]
  }
];

const App = () => {
  const [selectedPlaylist, setSelectedPlaylist] = useState(mockPlaylists[0]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentSongIndex, setCurrentSongIndex] = useState(0);

  // Auto play next song when current ends
  useEffect(() => {
    if (isPlaying) {
      const timer = setTimeout(() => {
        setCurrentSongIndex((prev) =>
          prev < selectedPlaylist.songs.length - 1 ? prev + 1 : 0
        );
      }, 5000); // Simulate a 5s song

      return () => clearTimeout(timer);
    }
  }, [isPlaying, currentSongIndex, selectedPlaylist]);

  return (
    <div className="h-screen bg-gradient-to-b from-[#0f0f1a] to-[#1a1a2e] text-white flex flex-col">
      {/* Header */}
      <header className="p-6 border-b border-purple-800 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-8 w-8 text-purple-500"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-.5-13v9c0 .55-.45 1-1 1s-1-.45-1-1v-9c0-.55.45-1 1-1s1 .45 1 1zm5 0v9c0 .55-.45 1-1 1s-1-.45-1-1v-9c0-.55.45-1 1-1s1 .45 1 1z" />
          </svg>
          <h1 className="text-xl font-bold">Spotify</h1>
        </div>
        <nav className="hidden md:flex space-x-6">
          <a href="#" className="hover:text-purple-500 transition-colors">
            Home
          </a>
          <a href="#" className="hover:text-purple-500 transition-colors">
            Search
          </a>
          <a href="#" className="hover:text-purple-500 transition-colors">
            Library
          </a>
        </nav>
        <button className="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded-full font-semibold transition-colors">
          Upgrade
        </button>
      </header>

      {/* Main Content */}
      <main className="flex-1 overflow-y-auto p-6">
        <section className="mb-10">
          <h2 className="text-2xl font-bold mb-4">Browse All</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4">
            {mockPlaylists.map((playlist) => (
              <div
                key={playlist.id}
                onClick={() => setSelectedPlaylist(playlist)}
                className={`cursor-pointer rounded-lg overflow-hidden shadow-md hover:shadow-purple-500/30 transition-shadow ${
                  playlist.id === selectedPlaylist.id ? 'ring-2 ring-purple-500' : ''
                }`}
              >
                <img
                  src={playlist.image}
                  alt={playlist.name}
                  className="w-full h-40 object-cover"
                />
                <div className="p-3">
                  <h3 className="font-bold truncate">{playlist.name}</h3>
                  <p className="text-sm text-gray-400 truncate">{playlist.description}</p>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* Selected Playlist Details */}
        <section className="mt-10">
          <div className="flex flex-col md:flex-row gap-6">
            <div className="md:w-1/3 lg:w-1/4">
              <img
                src={selectedPlaylist.image}
                alt={selectedPlaylist.name}
                className="w-full aspect-square object-cover rounded-md shadow-lg"
              />
            </div>
            <div className="md:w-2/3 lg:w-3/4">
              <h2 className="text-sm uppercase text-gray-400">Playlist</h2>
              <h1 className="text-4xl font-bold mt-1">{selectedPlaylist.name}</h1>
              <p className="text-gray-300 mt-2">{selectedPlaylist.description}</p>
              <div className="mt-6 flex items-center space-x-4">
                <button
                  onClick={() => setIsPlaying(!isPlaying)}
                  className="bg-purple-600 hover:bg-purple-700 p-3 rounded-full transition-colors"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    {isPlaying ? (
                      <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
                    ) : (
                      <path d="M8 5v14l11-7z" />
                    )}
                  </svg>
                </button>
                <button className="border border-gray-600 hover:border-white px-4 py-2 rounded-full transition-colors">
                  Shuffle
                </button>
              </div>
            </div>
          </div>

          {/* Song List */}
          <div className="mt-8">
            <table className="w-full text-left">
              <thead>
                <tr className="text-gray-400 text-sm border-b border-gray-700">
                  <th className="pb-3">#</th>
                  <th className="pb-3">Title</th>
                  <th className="pb-3 hidden sm:table-cell">Artist</th>
                  <th className="pb-3 hidden md:table-cell">Album</th>
                  <th className="pb-3 text-right pr-4">Duration</th>
                </tr>
              </thead>
              <tbody>
                {selectedPlaylist.songs.map((song, index) => (
                  <tr
                    key={index}
                    className={`${
                      index === currentSongIndex && isPlaying
                        ? 'text-purple-500'
                        : 'text-gray-300'
                    } hover:bg-gray-800/50 transition-colors cursor-pointer`}
                    onClick={() => {
                      setCurrentSongIndex(index);
                      setIsPlaying(true);
                    }}
                  >
                    <td className="py-3">
                      {index === currentSongIndex && isPlaying ? (
                        <span className="inline-block w-2 h-2 rounded-full bg-purple-500 animate-pulse"></span>
                      ) : (
                        index + 1
                      )}
                    </td>
                    <td className="py-3">{song.title}</td>
                    <td className="py-3 hidden sm:table-cell">{song.artist}</td>
                    <td className="py-3 hidden md:table-cell">Album Name</td>
                    <td className="py-3 text-right pr-4">3:30</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
      </main>

      {/* Now Playing Bar */}
      <footer className="bg-black/80 backdrop-blur-md border-t border-gray-800 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <img
              src={selectedPlaylist.songs[currentSongIndex]
                ? `https://picsum.photos/200/300?random=${currentSongIndex}`
                : "https://picsum.photos/200/300?random=0"
              }
              alt="Now playing"
              className="w-12 h-12 rounded"
            />
            <div>
              <h3 className="font-medium">
                {selectedPlaylist.songs[currentSongIndex]?.title || "No song"}
              </h3>
              <p className="text-sm text-gray-400">
                {selectedPlaylist.songs[currentSongIndex]?.artist || "Artist"}
              </p>
            </div>
          </div>

          <div className="flex flex-col items-center space-y-2">
            <div className="flex items-center space-x-4">
              <button>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-gray-400"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <path d="M11 7L9.6 8.4l2.6 2.6H2v2h10.2l-2.6 2.6L11 17l5-5-5-5z" />
                </svg>
              </button>
              <button
                onClick={() => setIsPlaying(!isPlaying)}
                className="bg-white text-black rounded-full p-2 hover:bg-gray-200"
              >
                {isPlaying ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
                  </svg>
                ) : (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path d="M8 5v14l11-7z" />
                  </svg>
                )}
              </button>
              <button>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-gray-400"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <path d="M13 7l5 3.5L13 14V7zM4 5v14l8.5-5L4 5z" />
                </svg>
              </button>
            </div>
            <div className="w-full h-1 bg-gray-700 rounded-full">
              <div
                className="h-full w-1/2 bg-purple-500 rounded-full"
                style={{
                  width: `${Math.random() * 100}%`
                }}
              ></div>
            </div>
          </div>

          <div className="hidden sm:flex items-center space-x-4">
            <button>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 text-gray-400"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M7 24h2v-2H7v2zm0-16h2v-2H7v2zm0-8h2V8H7v2zm0 8h2v-2H7v2zm10 10h2v-2h-2v2zm0-16h2v-2h-2v2zm0 8h2v-2h-2v2zm0-8h2V8h-2v2zm0 16h2v-2h-2v2zM9 24v-2h8v2H9zm0-20v-2h8v2H9zm0 8v-2h8v2H9z" />
              </svg>
            </button>
            <button>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 text-gray-400"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h2V3h-4z" />
              </svg>
            </button>
            <div className="w-24 bg-gray-700 rounded-full h-1">
              <div className="bg-white h-1 rounded-full w-2/3"></div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default App;
```